{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Welcome! \ud83d\udc4b This documentation will guide you through setting up a Node.js project for building small to medium-scale RESTful APIs using Express.js . The aim is to provide a sustainable structure that simplifies complex projects into smaller, more reusable, and modular components. We will also focus on best practices and various ways to optimize workflow when working collaboratively. Node.js (or informally Node ) is an open-source, cross-platform runtime environment that allows developers to run JavaScript on the server. Node provides an environment to run scripts server-side to produce dynamic web content for the client. Express.js is an unopinionated and fairly minimalist Node web framework that provides a robust set of features to develop production-ready web and mobile applications. Intended Users This documentation is targeted towards the following users: Beginner to intermediate developers who need to setup a backend for a personal project. Software development teams working on small or medium-sized web applications. Prerequisite Knowledge The documentation assumes the following: Working knowledge of JavaScript( ES6 ), HTML, CSS - you are expected to know how to write basic HTML and CSS to make a simple static website. Working knowledge of Node.js - you should be familiar with using a package manager such as npm or yarn to install Node.js packages or modules. Software Requirements Before proceeding, ensure you have the following installed: Node.js v14.x or later Npm Package Manager v7.x or later Visual Studio Code Although the screenshots provided will be from VS Code, most of the instructions in this documentation are independent of your IDE. IDEs such as Visual Studio , WebStorm , and Atom are also viable alternatives. Procedures Overview The main sections of the documentation are summarized below: Elaboration on Project Structure Configuring Project for Collaboration Installing Express.js Adding Routes Middleware Typographical Conventions MORE CONTENT HERE Typically, code snippets will include the filename at the top. Snippets will also have clickable numbers that can be useful if you do not understand what a specific piece of code does. See an example of this below. Notes and Warning Messages Throughout the documentation, we will use message blocks to alert you to relevant information. Each possible message block, from most important to least important: Danger Specifies actions that may cause an error or will cause the application to crash. Failure Specifies actions that may lead to unexpected behaviour. Bug Specifies actions that may cause an error. Warning Specifies content that must be read before proceeding. Info Indicates additional information or tips. Success Indicates what success looks like.","title":"Home"},{"location":"#introduction","text":"Welcome! \ud83d\udc4b This documentation will guide you through setting up a Node.js project for building small to medium-scale RESTful APIs using Express.js . The aim is to provide a sustainable structure that simplifies complex projects into smaller, more reusable, and modular components. We will also focus on best practices and various ways to optimize workflow when working collaboratively. Node.js (or informally Node ) is an open-source, cross-platform runtime environment that allows developers to run JavaScript on the server. Node provides an environment to run scripts server-side to produce dynamic web content for the client. Express.js is an unopinionated and fairly minimalist Node web framework that provides a robust set of features to develop production-ready web and mobile applications.","title":"Introduction"},{"location":"#intended-users","text":"This documentation is targeted towards the following users: Beginner to intermediate developers who need to setup a backend for a personal project. Software development teams working on small or medium-sized web applications.","title":"Intended Users"},{"location":"#prerequisite-knowledge","text":"The documentation assumes the following: Working knowledge of JavaScript( ES6 ), HTML, CSS - you are expected to know how to write basic HTML and CSS to make a simple static website. Working knowledge of Node.js - you should be familiar with using a package manager such as npm or yarn to install Node.js packages or modules.","title":"Prerequisite Knowledge"},{"location":"#software-requirements","text":"Before proceeding, ensure you have the following installed: Node.js v14.x or later Npm Package Manager v7.x or later Visual Studio Code Although the screenshots provided will be from VS Code, most of the instructions in this documentation are independent of your IDE. IDEs such as Visual Studio , WebStorm , and Atom are also viable alternatives.","title":"Software Requirements"},{"location":"#procedures-overview","text":"The main sections of the documentation are summarized below: Elaboration on Project Structure Configuring Project for Collaboration Installing Express.js Adding Routes Middleware","title":"Procedures Overview"},{"location":"#typographical-conventions","text":"MORE CONTENT HERE Typically, code snippets will include the filename at the top. Snippets will also have clickable numbers that can be useful if you do not understand what a specific piece of code does. See an example of this below.","title":"Typographical Conventions"},{"location":"#notes-and-warning-messages","text":"Throughout the documentation, we will use message blocks to alert you to relevant information. Each possible message block, from most important to least important: Danger Specifies actions that may cause an error or will cause the application to crash. Failure Specifies actions that may lead to unexpected behaviour. Bug Specifies actions that may cause an error. Warning Specifies content that must be read before proceeding. Info Indicates additional information or tips. Success Indicates what success looks like.","title":"Notes and Warning Messages"},{"location":"pages/configuration/","text":"","title":"Configuration"},{"location":"pages/express-getting-started/","text":"Introduction to Installing Express.js This section will focus on helping you set up an Express.js (or informally Express ) is a web application framework for Node.js . Express was originally released as free and open-source software, and it is used to provide server-side logic for web and mobile applications. Express also used in many popular development stacks like MEAN. Info The MEAN Stack is a popular web development stack that is mainly used to create cloud-based applications using MongoDB , Express.js , AngularJS , and Node.js . It is popular because the MEAN stack can be written with only JavaScript . Installing Express.js Before we begin with the installation, you need to create a folder will be used to store your application. This can be done through the graphical user interface (GUI) or through the Terminal in Visual Studio Code (VSC). In order to provide better clarity, this guide will focus on providing instructions and screenshots for the Terminal. Open VSC and look for the navigation bar and select [File] > [Open Folder] to find the new folder that you created. At this point, your folder will open in VSC. The folder should be empty because you have not created any contents for your application yet. Select [Terminal] > [New Terminal] from the navigation bar. At this point, a new Terminal window will open. Please note that the Terminal window will be used for the majority of this section, so you will want to keep it open. Success Type \"npm init\" without the quotations in Terminal. At this point, you will be prompted to create a package.json file. For the purpose of this guide, you can go ahead and press enter 3 times or until you see a prompt to create an entry point. Success Info A package.json file is a JSON file that contains metadata related to the project. It is used to manage dependencies, scripts, versions, and other features of the modules that your application uses. Type \"app.js\" for the entry point and press enter for the remainder of the prompts in Terminal. If you have successfully completed this step, you should see a package.json file inside of the Explorer tab in the vertical navigation bar. Success Info An entry point is the JavaScript file that will be used to execute your file. It is considered good practice to name your entry point \"app.js\". Type \"npm install express --save\" (or the short form npm install express ) in Terminal. At this point, you will see the Terminal begin to download, install, and prepare Express for your project. Once completed, you will see a new folder called node_modules and a file called package-lock.json in the Explorer tab. Success Info The node_modules folder contains all of the dependencies from npm that your application requires to run. Info The package-lock.json file is used to determine the specific versions of dependencies for your modules. Select [File] > [New File] from the navigation bar and name the file \"app.js\". Type the following code inside of your app.js file: const express = require ( 'express' ) This line of code will import the express module into your app.js entry point file. Type the next line of code inside of your app.js file: const app = express () This line of code will create a new Express application. Type the remaining lines of code inside of your app.js file: const port = 3000 This line of code will store the number of the port that we will be using to connect to your localhost. Info Localhost is the default name that refers to the current computer that is being used to run the virtual server. Type the following lines of code inside of your app.js file: app . get ( '/' , ( req , res ) => { res . send ( 'Hello World!' ) }) The GET method route will allow our application to send the string \"Hello World!\" as a response when we connect to our localhost. You will be learning more about HTTP methods like GET in a later section. Type the last part of code you will need for this section in app.js: app . listen ( port , () => { console . log ( `Example app listening at http://localhost: ${ port } ` ) }) The app.listen() function is used to listen to a specified port for connections. For this application, we are using port 3000. Check all of the code that you have written and make sure it matches the example: const express = require ( 'express' ) const app = express () const port = 3000 app . get ( '/' , ( req , res ) => { res . send ( 'Hello World!' ) }) app . listen ( port , () => { console . log ( `Example app listening at http://localhost: ${ port } ` ) }) Type \"node app.js\" inside of the Terminal to run your application. If successful, you should see the success message that you typed in the app.listen() function from earlier. Success Open up your internet browser of choice and type \"http://localhost:3000/\" into the address bar. Once the page loads, you should see \"Hello World!\" in your browser. This means that you have successfully installed and created your first working server! \ud83d\udc4d Success Conclusion By the end of this section, you will have successfully learned the following: Used the Terminal to set up an npm package (package.json) Used the Terminal to install Express Imported an Express module into your app.js file Created a working Express server on your localhost on port 3009 Great job \ud83e\udd17. You can go ahead and click on the link below to move on to the next step: Adding Routes","title":"Introduction to Installing Express.js"},{"location":"pages/express-getting-started/#introduction-to-installing-expressjs","text":"This section will focus on helping you set up an Express.js (or informally Express ) is a web application framework for Node.js . Express was originally released as free and open-source software, and it is used to provide server-side logic for web and mobile applications. Express also used in many popular development stacks like MEAN. Info The MEAN Stack is a popular web development stack that is mainly used to create cloud-based applications using MongoDB , Express.js , AngularJS , and Node.js . It is popular because the MEAN stack can be written with only JavaScript .","title":"Introduction to Installing Express.js"},{"location":"pages/express-getting-started/#installing-expressjs","text":"Before we begin with the installation, you need to create a folder will be used to store your application. This can be done through the graphical user interface (GUI) or through the Terminal in Visual Studio Code (VSC). In order to provide better clarity, this guide will focus on providing instructions and screenshots for the Terminal. Open VSC and look for the navigation bar and select [File] > [Open Folder] to find the new folder that you created. At this point, your folder will open in VSC. The folder should be empty because you have not created any contents for your application yet. Select [Terminal] > [New Terminal] from the navigation bar. At this point, a new Terminal window will open. Please note that the Terminal window will be used for the majority of this section, so you will want to keep it open. Success Type \"npm init\" without the quotations in Terminal. At this point, you will be prompted to create a package.json file. For the purpose of this guide, you can go ahead and press enter 3 times or until you see a prompt to create an entry point. Success Info A package.json file is a JSON file that contains metadata related to the project. It is used to manage dependencies, scripts, versions, and other features of the modules that your application uses. Type \"app.js\" for the entry point and press enter for the remainder of the prompts in Terminal. If you have successfully completed this step, you should see a package.json file inside of the Explorer tab in the vertical navigation bar. Success Info An entry point is the JavaScript file that will be used to execute your file. It is considered good practice to name your entry point \"app.js\". Type \"npm install express --save\" (or the short form npm install express ) in Terminal. At this point, you will see the Terminal begin to download, install, and prepare Express for your project. Once completed, you will see a new folder called node_modules and a file called package-lock.json in the Explorer tab. Success Info The node_modules folder contains all of the dependencies from npm that your application requires to run. Info The package-lock.json file is used to determine the specific versions of dependencies for your modules. Select [File] > [New File] from the navigation bar and name the file \"app.js\". Type the following code inside of your app.js file: const express = require ( 'express' ) This line of code will import the express module into your app.js entry point file. Type the next line of code inside of your app.js file: const app = express () This line of code will create a new Express application. Type the remaining lines of code inside of your app.js file: const port = 3000 This line of code will store the number of the port that we will be using to connect to your localhost. Info Localhost is the default name that refers to the current computer that is being used to run the virtual server. Type the following lines of code inside of your app.js file: app . get ( '/' , ( req , res ) => { res . send ( 'Hello World!' ) }) The GET method route will allow our application to send the string \"Hello World!\" as a response when we connect to our localhost. You will be learning more about HTTP methods like GET in a later section. Type the last part of code you will need for this section in app.js: app . listen ( port , () => { console . log ( `Example app listening at http://localhost: ${ port } ` ) }) The app.listen() function is used to listen to a specified port for connections. For this application, we are using port 3000. Check all of the code that you have written and make sure it matches the example: const express = require ( 'express' ) const app = express () const port = 3000 app . get ( '/' , ( req , res ) => { res . send ( 'Hello World!' ) }) app . listen ( port , () => { console . log ( `Example app listening at http://localhost: ${ port } ` ) }) Type \"node app.js\" inside of the Terminal to run your application. If successful, you should see the success message that you typed in the app.listen() function from earlier. Success Open up your internet browser of choice and type \"http://localhost:3000/\" into the address bar. Once the page loads, you should see \"Hello World!\" in your browser. This means that you have successfully installed and created your first working server! \ud83d\udc4d Success","title":"Installing Express.js"},{"location":"pages/express-getting-started/#conclusion","text":"By the end of this section, you will have successfully learned the following: Used the Terminal to set up an npm package (package.json) Used the Terminal to install Express Imported an Express module into your app.js file Created a working Express server on your localhost on port 3009 Great job \ud83e\udd17. You can go ahead and click on the link below to move on to the next step: Adding Routes","title":"Conclusion"},{"location":"pages/getting-started/","text":"Hello World Installing wrkjghbalkrgh.wlg Configuration Folder Structure","title":"Hello World"},{"location":"pages/getting-started/#hello-world","text":"","title":"Hello World"},{"location":"pages/getting-started/#installing","text":"wrkjghbalkrgh.wlg","title":"Installing"},{"location":"pages/getting-started/#configuration","text":"","title":"Configuration"},{"location":"pages/getting-started/#folder-structure","text":"","title":"Folder Structure"},{"location":"pages/glossary/","text":"","title":"Glossary"},{"location":"pages/middleware/","text":"","title":"Middleware"},{"location":"pages/project-structure/","text":"","title":"Project structure"},{"location":"pages/routes/","text":"","title":"Routes"},{"location":"pages/snippets/","text":"Possible project structure. This is not written in stone, MVC and other architecture are often highly opinionated. | -- project-name # Root Directory | -- docs/ # Documentation | -- public/ # Publicly Accessible Assets | | -- images/ | | -- js/ # Client-side JavaScript | | -- styles/ # CSS Stylesheets | -- src/ | | -- app.js # Application Entry Point | | -- api/ | | | -- controllers/ # Request Managers | | | -- middleware/ # Intermediary b/w Client Request & Server Response | | | -- routes/ # API Endpoints (URIs) | | -- config/ # Configuration/Settings Files | | -- db/ # Mock Database or Connection to Database | | -- models/ # Database Models | | -- services/ # Services Layer for Business Logic (Talks to Database) | | -- utils/ # Miscellaneous Helper Functions | | -- views/ # Static Template Files (EJS, Pug, or Mustache) | -- test/ # Test Suite | -- .env # Environment Variables | -- .eslintignore | -- .eslintrc.js # Linting Rules | -- .gitignore # Files/Directory Git Should Ignore | -- .prettierignore | -- .prettierrc.js # Code Formatting Rules | -- package.json # Metadata and Package List | -- README.md | -- server.js # Application Server /** .eslintrc.js */ module . exports = { extends : 'airbnb-base' , // (1) env : { // (2) browser : true , commonjs : true , node : true , es6 : true , jquery : true , }, rules : { indent : [ 'error' , 4 ], // (3) 'linebreak-style' : 0 , // (4) 'max-len' : [ 'error' , { code : 120 }], // (5) 'max-lines-per-function' : [ 'error' , { max : 35 , skipComments : true }], // (6) 'max-nested-callbacks' : [ 'error' , 2 ], // (7) 'no-console' : 'off' , // (8) }, }; Inherit all rules from airbnb code styleguide . Environments that provide predefined global variables - see ESLint Environments for a complete list of supported environments. Enforces consistent indentation (4 spaces). Enforces consistent linebreak style. Enforces a maximum line length of 120 characters. Enforces a maximum function length of 35 lines. Enforces a maximum depth or 3 that callbacks can be nested. A common pitfall that is easy to fall into is nesting callbacks, which makes code more difficult to read the deeper the callbacks are nested. Allows the use of console. /** .prettierrc.js */ module . exports = { trailingComma : \"es5\" , tabWidth : 4 , semi : true , singleQuote : true , }; /** /src/app.js */ const express = require ( 'express' ); // (1) const app = express (); // (2) app . get ( '/' , ( req , res ) => { // (3) res . send ( 'Hello World' ); // (4) }); module . exports = app ; Import Express module Create Express application Handle GET request made for the root URL. req is the incoming request and res is used to send back the desired HTTP response. Return a message of 'Hello World' in response to the HTTP request. Note, express supports methods that correspond to each HTTP request method ( GET , POST , PUT , DELETE , etc. ). For a refresher on the different HTTP request methods, see here . /** server.js */ const app = require ( './src/app' ); // (1) const port = process . env . PORT || 3000 ; // (2) app . listen ( port , () => { // (3) console . log ( `\ud83d\ude80 Server started successfully, listening on port ${ port } ` ); }); Import instance of Express Application created in /src/app.js . Specify port number for server to listen on. Start server and listen on specified port.","title":"Getting Started"},{"location":"pages/troubleshooting/","text":"","title":"Troubleshooting"}]}